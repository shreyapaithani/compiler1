
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN CHAR COMMA DIVIDE ELSE EQ FLOAT FOR GT ID IF INT LBRACE LPAREN LT MINUS MULT NUMBER PLUS RBRACE RETURN RPAREN SEMICOLON STRING VOID WHILEprogram : functionfunction : INT ID LPAREN RPAREN LBRACE statements RBRACEstatements : statements statementstatements : statementstatement : INT ID ASSIGN expression SEMICOLONstatement : RETURN expression SEMICOLONexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression MULT expression\n                  | expression DIVIDE expressionexpression : NUMBERexpression : ID'
    
_lr_action_items = {'INT':([0,7,9,10,14,19,29,],[3,8,8,-4,-3,-6,-5,]),'$end':([1,2,13,],[0,-1,-2,]),'ID':([3,8,11,18,20,21,22,23,],[4,12,17,17,17,17,17,17,]),'LPAREN':([4,],[5,]),'RPAREN':([5,],[6,]),'LBRACE':([6,],[7,]),'RETURN':([7,9,10,14,19,29,],[11,11,-4,-3,-6,-5,]),'RBRACE':([9,10,14,19,29,],[13,-4,-3,-6,-5,]),'NUMBER':([11,18,20,21,22,23,],[16,16,16,16,16,16,]),'ASSIGN':([12,],[18,]),'SEMICOLON':([15,16,17,24,25,26,27,28,],[19,-11,-12,29,-7,-8,-9,-10,]),'PLUS':([15,16,17,24,25,26,27,28,],[20,-11,-12,20,20,20,20,20,]),'MINUS':([15,16,17,24,25,26,27,28,],[21,-11,-12,21,21,21,21,21,]),'MULT':([15,16,17,24,25,26,27,28,],[22,-11,-12,22,22,22,22,22,]),'DIVIDE':([15,16,17,24,25,26,27,28,],[23,-11,-12,23,23,23,23,23,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'function':([0,],[2,]),'statements':([7,],[9,]),'statement':([7,9,],[10,14,]),'expression':([11,18,20,21,22,23,],[15,24,25,26,27,28,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> function','program',1,'p_program','parser.py',41),
  ('function -> INT ID LPAREN RPAREN LBRACE statements RBRACE','function',7,'p_function','parser.py',45),
  ('statements -> statements statement','statements',2,'p_statements_multiple','parser.py',49),
  ('statements -> statement','statements',1,'p_statements_single','parser.py',53),
  ('statement -> INT ID ASSIGN expression SEMICOLON','statement',5,'p_statement_declaration','parser.py',57),
  ('statement -> RETURN expression SEMICOLON','statement',3,'p_statement_return','parser.py',61),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',65),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',66),
  ('expression -> expression MULT expression','expression',3,'p_expression_binop','parser.py',67),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',68),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',72),
  ('expression -> ID','expression',1,'p_expression_var','parser.py',76),
]
